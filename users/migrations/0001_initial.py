# Generated by Django 3.2.13 on 2022-05-17 15:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('Teacher', 'Teacher'), ('Student', 'Student')], default='Student', max_length=7, verbose_name='Роль')),
                ('photo', models.ImageField(default='uploads/users/user_default.png', upload_to='uploads/users/', verbose_name='Фото')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('manager', users.managers.AppUserManager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('user_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_from', to=settings.AUTH_USER_MODEL, verbose_name='Подписчик')),
                ('user_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_to', to=settings.AUTH_USER_MODEL, verbose_name='Человек, на которого подписываются')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
            managers=[
                ('manager', users.managers.FollowManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bunch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Accepted', 'Accepted'), ('Finished', 'Finished')], default='Waiting', help_text='Поставьте стстус', max_length=16, verbose_name='Статус')),
                ('datetime', models.CharField(default=None, max_length=10, verbose_name='Время занятия')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bunch_student', to=settings.AUTH_USER_MODEL, verbose_name='Ученик')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bunch_teacher', to=settings.AUTH_USER_MODEL, verbose_name='Учитель')),
            ],
            options={
                'verbose_name': 'Связка',
                'verbose_name_plural': 'Связки',
                'ordering': ('datetime',),
            },
            managers=[
                ('manager', users.managers.BunchManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='follow',
            constraint=models.UniqueConstraint(fields=('user_to', 'user_from'), name='unique_follow'),
        ),
        migrations.AddConstraint(
            model_name='bunch',
            constraint=models.UniqueConstraint(fields=('teacher', 'student', 'datetime'), name='unique_bunch'),
        ),
    ]
